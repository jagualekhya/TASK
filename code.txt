Step 1: Generate the Processed Video and CSV File
import cv2
import numpy as np
import pandas as pd

# Download the video file from Google Drive
!gdown --id 1goI3aHVE29Gko9lpTzgi_g3CZZPjJq8w -O video.mp4

# Define the quadrants based on the video resolution
cap = cv2.VideoCapture('video.mp4')
video_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
video_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

quadrants = {
    1: [(0, 0), (video_width // 2, video_height // 2)],
    2: [(video_width // 2, 0), (video_width, video_height // 2)],
    3: [(0, video_height // 2), (video_width // 2, video_height)],
    4: [(video_width // 2, video_height // 2), (video_width, video_height)],
}

colors = {
    'red': ([0, 70, 50], [10, 255, 255]),
    'green': ([50, 100, 100], [70, 255, 255]),
    'blue': ([100, 150, 0], [140, 255, 255]),
}

def get_quadrant(x, y):
    for quadrant, ((x1, y1), (x2, y2)) in quadrants.items():
        if x1 <= x <= x2 and y1 <= y <= y2:
            return quadrant
    return None

def record_event(events, time, quadrant, color, event_type):
    events.append({
        'Time': time,
        'Quadrant Number': quadrant,
        'Ball Colour': color,
        'Type': event_type
    })

events = []
previous_positions = {}

fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter('processed_video.avi', fourcc, 20.0, (video_width, video_height))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    timestamp = cap.get(cv2.CAP_PROP_POS_MSEC) / 1000  # Get the current timestamp in seconds

    for color, (lower, upper) in colors.items():
        lower = np.array(lower)
        upper = np.array(upper)

        mask = cv2.inRange(hsv, lower, upper)
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            if cv2.contourArea(contour) > 500:
                x, y, w, h = cv2.boundingRect(contour)
                cx, cy = x + w // 2, y + h // 2

                quadrant = get_quadrant(cx, cy)

                if color not in previous_positions:
                    previous_positions[color] = (cx, cy, quadrant)
                    continue

                prev_x, prev_y, prev_quadrant = previous_positions[color]

                if quadrant != prev_quadrant:
                    if quadrant is not None:
                        record_event(events, timestamp, quadrant, color, 'Entry')
                        cv2.putText(frame, f'{timestamp:.2f} Entry', (cx, cy), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
                    if prev_quadrant is not None:
                        record_event(events, timestamp, prev_quadrant, color, 'Exit')
                        cv2.putText(frame, f'{timestamp:.2f} Exit', (prev_x, prev_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

                previous_positions[color] = (cx, cy, quadrant)

    out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()

# Save the events to a CSV file
events_df = pd.DataFrame(events)
events_df.to_csv('events.csv', index=False)


Step 2: Verify Files Are Created
import os
print("Files in current directory:")
print(os.listdir())

# Check if the files exist
if os.path.exists('events.csv'):
    print("'events.csv' found.")
else:
    print("'events.csv' not found.")

if os.path.exists('processed_video.avi'):
    print("'processed_video.avi' found.")
else:
    print("'processed_video.avi' not found.")


Step 3: Copy Files to Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Define the path to your "Video" folder
video_folder_path = '/content/drive/MyDrive/Video/'

# Ensure the folder exists (create it if it doesn't)
if not os.path.exists(video_folder_path):
    os.makedirs(video_folder_path)

# Copy the files to the "Video" folder
!cp events.csv /content/drive/MyDrive/Video/
!cp processed_video.avi /content/drive/MyDrive/Video/

